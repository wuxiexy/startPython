#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# 由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。
# 当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行


# # 这个符号是注释, 解释器会忽略掉注释

# =========================================================================================
# a = 100
# if a >= 1000:
#     print (a)
# else:
#     print (-a)


# =========================================================================================
# 转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\\表示的字符就是\
# b = 'I\'m "ok"'
# print(b)


# =========================================================================================
# c = '\\\\\\\\\t\\\\'
# print(c)
# # r''表示''内部的字符串默认不转义
# cc = r'\\\\\\\\\t\\\\'
# print(
#     cc
# )


# =========================================================================================
# and 运算是与运算，只有所有都为True，and运算结果才是True：
# d1 = 1
# d2 = 2
# d3 = 3
# d4 = ''
# d = d1 and d2
# dd = d3 and d4
# if (d):
#     print('d is true -- and')
# else:
#     print('d is false -- and')
# if (dd):
#     print('dd is true -- and')
# else:
#     print('dd is false -- and')


# =========================================================================================
# or 运算是或运算，只要其中有一个为True，or运算结果就是True：
# d1 = 1
# d2 = ''
# d3 = 3
# d4 = ''
# d = d1 or d2
# dd = d3 or d4
# if (d):
#     print('d is true -- or')
# else:
#     print('d is false -- or')
# if (dd):
#     print('dd is true -- or')
# else:
#     print('dd is false -- or')


# =========================================================================================
# not 运算是非运算，它是一个单目运算符，把True变成False，False变成True：
# d1 = 1
# d2 = ''
# d3 = 3
# d4 = ''
# d = not d1 == d2
# dd = not d3 == d4
# if (d): print('d is true -- not')
# else: print('d is false -- not')
#
# if (dd): print('dd is true -- not')
# else: print('dd is false -- not')


# =========================================================================================
# 空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。
# 等号=是赋值语句，可以把任意数据类型赋值给变量



# =========================================================================================
# ******** 理解变量在计算机内存中的表示也非常重要。********
# 当我们写：
e = 'ABC'
# Python解释器干了两件事情：
# 1、在内存中创建了一个'ABC'的字符串；
# 2、在内存中创建了一个名为a的变量，并把它指向'ABC'。


# =========================================================================================
# 赋值
# a = 'ABC'
# b = a
# a = 'XYZ'
# print(b)


# =========================================================================================
# 所谓常量就是不能变的变量. 在Python中，通常用全部大写的变量名表示常量：
PI = 3.14159265359
# 但事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会被改变，
# 所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量PI的值，也没人能拦住你。


# =========================================================================================
# 整数的除法. 在Python中，有两种除法，
# 一种除法是/：  (除法计算结果是浮点数)
f = 10/3        # 3.3333333333333335
ff = 9/3        # 3.0  即使是两个整数恰好整除，结果也是浮点数;

# --------------------------------------------------------------------------
# 还有一种除法是//，称为地板除，两个整数的除法仍然是整数：
f2 = 10//3      # 3 只取结果的整数部分
ff2 = 10%3      #1 相反是只取结果的余数部分 余数运算


# =========================================================================================























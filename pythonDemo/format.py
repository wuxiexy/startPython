#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# 由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。
# 当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行

# 第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；
# 第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。
# 申明了UTF-8编码并不意味着你的.py文件就是UTF-8编码的，必须并且要确保文本编辑器正在使用UTF-8 without BOM编码：

# 如果.py文件本身使用UTF-8编码，并且也申明了# -*- coding: utf-8 -*-，打开命令提示符测试就可以正常显示中文：


# =========================================================================================
# 格式化
# 【 % 】运算符就是用来格式化字符串的。
# 在字符串内部，【 %s 】 表示用字符串替换，【 %d 】 表示用整数替换，
# 有几个【 %? 】占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。

# str = 'hello, %s' % 'world'
# print(str)

# str1 = 'hello, %s' % ('world')
# print(str1)

# str2 = 'hi, %s, you have ￥%d' % ('wx', 1000000000)
# print(str2)



# =========================================================================================
# 常见的占位符有：

# %d	整数
# %f	浮点数
# %s	字符串
# %x	十六进制整数


# =========================================================================================
# 格式化整数和浮点数还可以指定是否补 0 和 整数与小数的位数：
# b = '%2d-%02d' % (3, 1)
# print(b)
# b = '%02d-%02d' % (3, 1)
# print(b)
# b1 = '%.2f' % 3.1415926                         # 保留两位浮点数
# b2 = '%.4f' % 3.1415926                         # 保留四位浮点数
# print(b1)
# print(b2)



# =========================================================================================
# 如果你不太确定应该用什么，【 %s 】永远起作用，它会把任何数据类型转换为字符串：
s = 'my name is %s' % 'wx'
print(s)
s = 'my name is %s' % 0.123456
print(s)




















